@require: option
@require: base/result
@require: base/int
@require: base/list-ext
@require: csv/csv
@require: easytable/easytable

module CsvTable :sig

  val csv-to-itlist: string ?-> string -> inline-text list
  val csv-width: string ?-> string -> int

  direct \csvtable: [(ruleptn list)?; (cellfmt list)?; string?; (inline-text list)?; string] inline-cmd
  direct +csvtable: [(ruleptn list)?; (cellfmt list)?; string?; (inline-text list)?; string] block-cmd

end = struct

  % int -> cellfmt -> cellfmt list
  let-rec make-cellfmtlist l fmt =
    if l == 0 then
      []
    else
      fmt :: (make-cellfmtlist (l - 1) fmt)
  
  % string list -> inline-text list
  let-rec stringlist-to-itlist l =
    match l with
    | []      -> []
    | x :: xs -> embed-string x :: stringlist-to-itlist xs 
  
  % (string list) list -> inline-text list
  let-rec stringlist-at0-to-itlist l =
    match l with
    | []      -> []
    | x :: xs -> stringlist-to-itlist x
    
  % ('a list) list -> int
  let-rec get-maxlistlength-2dlist l =
      match l with
      | []      -> 0
      | x :: xs -> Int.max (List.length x) (get-maxlistlength-2dlist xs)
  
  % 'a csv-parser-error result -> Any
  let csv-error-notify row-n e =
    let get-errormsg e =
      match e with
      | CSVParserErrorUnExpectedChar(i, s) ->
          #`CSV parser error with char: `# ^ s ^ #` at `# ^ (arabic row-n) ^ #`, `# ^ (arabic i)
      | CSVParserErrorEOI ->
          `CSV parser error (EOI)`  % i don't know what EOI means
      in
    (abort-with-message (get-errormsg e))
  
  % string list -> ((string list) list) csv-parser-error result
  let parse-raw-csv sl =
    let-rec raw-csv-to-string sl =
      match sl with
      | []      -> ` `
      | x :: xs -> x ^ `,` ^ (raw-csv-to-string xs)
      in
    CSV.parser (raw-csv-to-string sl)

  % ((string list) list) csv-parser-error result -> Any -> inline-text list
  let csvresult-to-itlist row-n r =
    Result.map-or-else (csv-error-notify row-n) stringlist-at0-to-itlist r

  % string list -> (inline-text list) list
  let parse-readcsv-to-itlist sep-opt sl =
    let height = List.length sl in
    let-rec rec-parse-readcsv-to-itlist sep-opt sl =
      match sl with
      | []      -> []
      | x :: xs -> (csvresult-to-itlist (height - (List.length xs)) (CSV.parser ?:sep-opt x)) :: rec-parse-readcsv-to-itlist sep-opt xs
      in
    rec-parse-readcsv-to-itlist sep-opt sl
  
  % ('a list) list -> 'a list
  let-rec list2d-to-list l =
    match l with
    | []      -> []
    | x :: xs -> List.append x (list2d-to-list xs)
  
  % int -> (('a list) list) -> (('a list) list)
  let-rec fill-itlist2 n l =
    let fill-itlist n l =
      let lack = n - List.length l in
      List.append l (List.repeat lack { })
      in
    match l with
    | []      -> []
    | x :: xs -> fill-itlist n x :: fill-itlist2 n xs

  let set-header headers itlistlist =
    let replace-1st index source =
      if index == 0 then
        headers
      else
        source
    in
    List.mapi replace-1st itlistlist


  % provided functions

  % string -> inline-text list
  let csv-to-itlist ?:sep-opt source =
    let separator =
      match sep-opt with
      | Some(s) -> s
      | None    -> `,`
      in
    source |> read-file
           |> parse-readcsv-to-itlist separator
           |> list2d-to-list

  % string -> int
  let csv-width ?:sep-opt source =
    let separator =
      match sep-opt with
      | Some(s) -> s
      | None    -> `,`
      in
    source |> read-file
           |> parse-readcsv-to-itlist separator
           |> get-maxlistlength-2dlist

  % [string] inline-cmd
  let-inline ctx \csvtable ?:rules-list-opt ?:cfmlst ?:sep-opt ?:headers source =
    let separator =
      match sep-opt with
      | Some(s) -> s
      | None    -> `,`
      in
    let itlist = source |> read-file |> parse-readcsv-to-itlist separator in
    let listwidth = get-maxlistlength-2dlist itlist in
    let cellfmts = cfmlst |> Option.from (make-cellfmtlist listwidth EasyTableAlias.r) in
    let rules-list = rules-list-opt |> Option.from [EasyTableAlias.t; EasyTableAlias.b; EasyTableAlias.m 1;] in
    let content = 
      if Option.is-some headers then
        set-header (Option.unwrap headers) itlist
      else
        itlist
    in
    let filled-content = fill-itlist2 listwidth content in
    read-inline ctx {\easytable?:(rules-list) (cellfmts) (list2d-to-list filled-content);}

  % [string] block-cmd
  let-block ctx +csvtable ?:rules-list-opt ?:cfmlst ?:sep-opt ?:headers source =
    let separator =
      match sep-opt with
      | Some(s) -> s
      | None    -> `,`
      in
    let itlist = source |> read-file |> parse-readcsv-to-itlist separator in
    let listwidth = get-maxlistlength-2dlist itlist in
    let cellfmts = cfmlst |> Option.from (make-cellfmtlist listwidth EasyTableAlias.r) in
    let rules-list = rules-list-opt |> Option.from [EasyTableAlias.t; EasyTableAlias.b; EasyTableAlias.m 1;] in
    let content =
      if Option.is-some headers then
        set-header (Option.unwrap headers) itlist
      else
        itlist
    in
    let filled-content = fill-itlist2 listwidth content in
    read-block ctx '<+easytable?:(rules-list) (cellfmts) (list2d-to-list filled-content);>

end